use async_trait::async_trait;
use crate::auth::error::AuthError;
use crate::auth::request::login::LoginRequest;
use crate::auth::request::register::RegisterRequest;
use crate::auth::request::renew::RenewRequest;
use serde::{Deserialize, Serialize};

/// # Token Response
#[derive(Debug, Serialize, Deserialize)]
pub struct TokenResponse {
    /// ## Long token
    /// The long token is stored in the local storage and in the database
    /// This token is used to authenticate the user and generate the short token
    /// The long_token is only present in the response when the user logs in or registers
    pub long_token: Option<String>,
    /// ## Short token
    /// The short token is stored also in the local storage but not in the database
    /// This token is used to authenticate the user in microservices, and it is valid for a short period of time
    /// The short token is generated by the long token, and it is signed with a secret key that is stored in the microservices,
    /// and it is used to verify the token
    pub short_token: String,
}

#[async_trait]
pub trait AuthService: Send + Sync {
    async fn login(&self, login_request: &LoginRequest) -> Result<TokenResponse, AuthError>;
    async fn register(&self, register_request: &RegisterRequest)
        -> Result<TokenResponse, AuthError>;
    async fn renew(&self, renew_request: &RenewRequest) -> Result<TokenResponse, AuthError>;
}